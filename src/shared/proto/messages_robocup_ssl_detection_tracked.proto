syntax = "proto2";

message Vector2 {
    required float x = 1;
    required float y = 2;
}

message Vector3 {
    required float x = 1;
    required float y = 2;
    required float z = 3;
}

// The team color of the robot
enum TeamColor {
    UNKNOWN = 1;
    YELLOW = 2;
    BLUE = 3;
}

message RobotId {
    // The robot number
    required uint32 id = 1;
    // The team color
    required TeamColor team_color = 2;
}

enum ChipKickDetectionSupport {
    UNSUPPORTED = 0;
    FIRST_TOUCHDOWN_ONLY = 1;
    ALL_TOUCHDOWNS = 2;
}

// A single tracked ball
message TrackedBall {
    // The quality of the detection
    // A value between 0 (not visible) and 1 (visible)
    // The exact implementation depends on the source software
    optional float quality = 1;

    // The position (x, y, height) [m] in the ssl-vision coordinate system
    required Vector3 pos = 2;

    // The velocity [m/s] in the ssl-vision coordinate system
    optional Vector3 vel = 3;

    // The level of chip kick detection support by the source implementation
    required ChipKickDetectionSupport chip_kick_detection_support = 4;

    // The touch down location(s), if the ball is flying.
    // Depending on the source implementation, the next or all touch down locations may be provided
    // ChipKickDetectionSupport#UNSUPPORTED -> there are no valid touch down locations
    // ChipKickDetectionSupport#FIRST_TOUCHDOWN_ONLY -> there is only one touch down location, although the ball may have more
    // ChipKickDetectionSupport#ALL_TOUCHDOWNS -> all touch down locations are included
    repeated Vector2 touch_down_locations = 5;
}

// A ball kicked by a robot, including predictions when the ball will come to a stop
message KickedBall {
    // The initial position [m] from which the ball was kicked
    required Vector3 pos = 1;
    // The initial velocity [m/s] with which the ball was kicked
    required Vector3 vel = 2;
    // The unix timestamp [s] when the kick was performed
    required double timestamp = 3;

    // The predicted time [s] that ball ball needs to come to a stop
    optional float stop_time = 4;
    // The predicted position [m] at which the ball will come to a stop
    optional Vector2 stop_pos = 5;

    // The robot that kicked the ball
    optional RobotId robot_id = 6;

    // A flag to indicate if the ball was chipped initially
    optional bool chipped = 7;
}

// A single tracked robot
message TrackedRobot {
    required RobotId robot_id = 1;

    // The quality of the detection
    // A value between 0 (not visible) and 1 (visible)
    // The exact implementation depends on the source software
    optional float quality = 2;

    // The position [m] in the ssl-vision coordinate system
    required Vector2 pos = 3;
    // The orientation [rad] in the ssl-vision coordinate system
    required float orientation = 4;

    // The velocity [m/s] in the ssl-vision coordinate system
    optional Vector2 vel = 5;
    // The angular velocity [rad/s] in the ssl-vision coordinate system
    optional float vel_angular = 6;

    // The robot height
    required float height = 7;
}

// A frame that contains all currently tracked objects on the field on all cameras
message TrackedFrame {
    // A monotonous increasing frame counter
    required uint32 frame_number = 1;
    // The unix timestamp in [s] of the data
    // If timestamp is larger than timestamp_captured, the source has applied a prediction already
    required double timestamp = 2;
    // The unix timestamp in [s] of the source image as reported by ssl-vision
    required double timestamp_captured = 3;

    // The list of detected balls
    // The first ball is the primary one
    // Sources may add additional balls based on their capabilities
    repeated TrackedBall balls = 4;
    // The list of detected robots of both teams
    repeated TrackedRobot robots = 5;

    // Information about a kicked ball, if the ball was kicked by a robot and is still moving
    // Note: This field is optional. Some source implementations might not set this at any time
    optional KickedBall kicked_ball = 6;
}
